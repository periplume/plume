#!/bin/bash
# author: jkl
# version: v1.0-0-g53e70b8
# https://github.com/periplume/plume
# scripted writing management system

# self-identify the script name (it can safely be changed)
scriptname=${0##*/}

# main subdir in which all content is stored
filestore=base

# index file
indexfile=$filestore/.index

# global logfile
logfile=$scriptname.log

# support files
vimrc=support/vimrc
vimhints=support/vimhints.txt

# name of printer (from lpstat -p)
# for proof and print functions (coming)
printer="HL-2270DW"

# maximum number of projects (an arbitrary limit)
MAXPROJECTS=100

# TODO
# add editor as ENV VAR?
# add version function to report version
# change outline to markdown format (and file) set syntax=markdown
# add edit <outline> or <notes> for focused non-split-screen mode
# adjust outline for easy folding
# add set breakindent for outline mode


###############################
# core functions
###############################

usage ()
{
	# print basic usage
	# no args
	echo "usage: $scriptname"
	echo "$scriptname init (run once before use to set up environment)"
	echo "$scriptname create 'name' (to start a project)"
	echo "$scriptname list (to list all projects)"
	echo "$scriptname edit [index or name] (to edit a project)"
	echo "$scriptname rename [index] <new name> (to rename a project)"
	echo "$scriptname fixindex (checks index consistency, rebuilds if corrupt)"
	# todo
	# reorder (promote index up by count, down by count, to top, to bottom) COMPLEX!
	# delete (reindex and archive)
	# proof (to print a proof copy)
	# publish (to some designated location)
	exit
}


init ()
{
	# initialize a new environment
	# no args
	# exit 1 if error
	if [ -e "$filestore" ]
	then
		echo "ERROR: $filestore exists"
		exit 1
	else
		mkdir "$filestore"
		touch "$indexfile"
		touch .gitignore
		echo "*.log" >> .gitignore
		echo "base/" >> .gitignore
	fi
	if [ -e "$logfile" ]
	then
		mv "$logfile" "$logfile.old"
	else
		touch "$logfile"
		logevent  "'$FUNCNAME $@': success: new environment created"
	fi
}


create ()
{
	# creates a new project
	# $@ (one arg, one or more words) is project name
	project=$@
	projectdir=$filestore/$project
	if [ -e "$projectdir" ]
	then
		printf "ERROR: $project exists, run init first\n"
		logevent "'$FUNCNAME $@': failed: '$project' exists"
		exit 1
	fi
	mkdir "$projectdir"
	controlfile="$projectdir/.control"
	touch "$controlfile"
	touch "$projectdir/draft"
	touch "$projectdir/outline"
	touch "$projectdir/notes"
	touch "$projectdir/summary"
	touch "$projectdir/sources"
	touch "$projectdir/keywords"
	touch "$projectdir/title"
	if [ ! -s "$indexfile" ]
	then
		index=1
	else
		lastindex=$(tail -1 "$indexfile" | cut -d: -f1)
		index=$(($lastindex+1))
	fi
	printf "$index:$name\n" >> $indexfile
	putvalue $index name $name
	putvalue $index created $(date "+%s")
	putvalue $index index $index
	logevent "'$FUNCNAME $@': success: '$project' created"
}

editsingle ()
{
	# edit designated file in single mode (no multiscreen studio)
	# $1 = index number of project
	# $2 = file (draft, outline, notes, title)
	if ! checkforlock $1
	then
		echo "ERROR: lock exists in $1" ; exit 1
	fi
	projectindex=$1
	projectname=$(getprojectname $projectindex)
	projectdir=$filestore/$projectname
	file=$projectdir/$2
	vim -u $vimrc "$file"
	exit
}

	

edit ()
{
	# open draft file of project by index number
	# $1 index
	projectindex=$1
	projectname=$(getprojectname $projectindex)
	projectdir=$filestore/$projectname
	draftfile=$projectdir/draft
	notesfile=$projectdir/notes
	titlefile=$projectdir/title
	outlinefile=$projectdir/outline
	controlfile=$projectdir/.control
	if [ -e "$projectdir/.lock" ]
	then
		echo "ERROR: '$projectname' in use (locked)"
		logevent "'$FUNCNAME $@': failed: lock file detected in $projectname"
		exit 1
	fi
	# check terminal size and open vim accordingly
	termsize
	if [ $? == 0 ]
	then
		# screen is large
		screen=0
	else
		# screen is small
		screen=1
	fi
	starttime=$(date '+%s')
	# do backups before editing
	currentversion=$(backup $projectname)
	touch "$projectdir/.lock"
	logevent "'$FUNCNAME $@': success: opening '$draftfile' for edits"
	if [ $screen == 0 ]
	then
		vim -u $vimrc "$draftfile" \
  		-c "vertical resize 95 | setl winfixwidth | setl foldcolumn=3" \
  		-c "vsplit $notesfile" \
  		-c "vertical resize 60 | setl winfixwidth | setl stl=%=%t..." \
  		-c "vsplit $titlefile" \
  		-c "vertical resize 50 | setl stl=%=%t" \
  		-c "split $outlinefile" \
  		-c "setl stl=%=%t | resize 50 | wincmd h | wincmd h"
	else
		vim -u $vimrc "$draftfile"
	fi
	sessiontime=$(($(date '+%s') - $starttime))
	logevent "'$FUNCNAME $@': success: '$draftfile' edited for $sessiontime seconds"
	priorelapsedtime=$(getvalue $projectindex elapsedtime)
	elapsedtime=$(($priorelapsedtime + $sessiontime))
	putvalue $projectindex elapsedtime $elapsedtime
	# set current version in control
	putvalue $projectindex version $currentversion
	# update word count
	words=$(wc -w "$draftfile" | cut -d' ' -f1)
	putvalue $projectindex wordcount $words
	rm "$projectdir/.lock"
	exit
}	


rename ()
{
	# rename a project
	# arg 1 = index of project to rename
	# arg 2 = new name
	index=$1
	old=$(grep ^$index: "$indexfile" | cut -d: -f2)
	new=${@:2}
	olddir=$filestore/$old
	newdir=$filestore/$new
	if [[ "$old" = "$new" ]]
	then
		echo "ERROR: cannot remane '$old' to '$new'"
		logevent "'$FUNCNAME $@': failed: '$new' cannot be same as '$old'"
		exit 1
	fi
	if [ -e "$olddir/.lock" ]
	then
		echo "ERROR: $old in use (locked)"
		logevent "'$FUNCNAME $@': failed: '$old' is locked" 
		exit 1
	fi
	echo "renaming '$old' to '$new'"
	mv "$olddir" "$newdir"
	projectdir=$filestore/$new
	controlfile=$projectdir/.control
	sed -i "s/^name=.*/name=$new/" "$controlfile"
	sed -i "s/^$index:.*/$index:$new/" "$indexfile"
	logevent "'$FUNCNAME $@': success: renamed '$old' to '$new'"
	echo "'$old' renamed to '$new'"
	exit
}


list ()
{
	# print pretty report on status of projects
	# note: assumes wc is less than 100000 and elapsed time less than 1000 hours each
	# still many fields to incorporate, eg, outline? # proofs, published? (eg to wordpress)
	if [ ! -d $filestore ]
	then
		echo "ERROR: database not initialized, run 'plume init' first"
		exit 1
	fi
	check=$(checkindex)
	if [[ $? != 0 ]]
	then
		echo "ERROR: indexfile is corrupt, run '$scriptname fixindex' to repair"
		exit 1
	fi
	printf "=====================================================================================\n"
	printf "index  name                               ver   wc       time   outline  proofs   pub\n"
	printf "=====================================================================================\n"
	while read i
	do
		index=${i%\:*}
		name=${i##*\:}
		version=$(getvalue $index version)
		elapsed=$(convertseconds $(getvalue $index elapsedtime))
		wc=$(getvalue $index wordcount)
		(( ${#name} > 35 )) && name="${name:0:31}..."
		printf "%-6s %-34s %-5s %-6s %6s\n" $index "$name" $version $wc $elapsed
	done < $indexfile
	printf "=====================================================================================\n"
}


checkindex ()
{
	# check for name and index consistency
	# no args
	# return 0 if consistent, 1 if inconsistent
	indexstate=0
	if [ ! -e $indexfile ]
	then
		echo "ERROR: no indexfile found"
		return 1
	fi
	if [ ! -s $indexfile ]
	then
		# indexfile exists and is empty
		if [ -z "$(ls $filestore)" ]
			# no projects either
		then
			return 0
		else
			# projects exist, index is empty
			return 1
		fi
	fi
	for i in $filestore/*
	do
		name=${i##*/}
		controlfilename=$(grep ^name= "$i/.control" 2>/dev/null | cut -d= -f2)
		controlfileindex=$(grep ^index= "$i/.control" 2>/dev/null | cut -d= -f2)
		indexname=$(grep ^$controlfileindex: $indexfile | cut -d: -f2)
		if [[ "$name" != "$controlfilename" ]] || [[ "$name" != "$indexname" ]]
		then
			indexstate=1
			logevent "'$FUNCNAME': failed: directory '$name' not found in index or controlfile"
		fi
	done
	# now check (cross-reference) indexfile against base/*
	while read -r line
	do
		index=${line%\:*}
		name=${line##*\:}
		controlfile=$filestore/$name/.control
		controlfilename=$(grep ^name= "$controlfile" 2>/dev/null | cut -d= -f2)
		controlfileindex=$(grep ^index= "$controlfile" 2>/dev/null | cut -d= -f2)
		if [[ "$name" != "$controlfilename" ]] || [[ "$index" != "$controlfileindex" ]]
		then
			indexstate=1
			logevent "'$FUNCNAME $@': failed: '$name' in index not found in $filestore"
		fi
	done < "$indexfile"
	if [[ $indexstate != 0 ]]
	then
		logevent "'$FUNCNAME $@': failure: index file is not consistent"
		return $indexstate
	else
		logevent "'$FUNCNAME $@': success: index file is consistent"
		return $indexstate
	fi
}


rebuildindex ()
{
	# rebuild corrupt or missing index
	# no args
	newindexfile=$filestore/.index.new
	touch "$newindexfile"
	indexmax=$(find "$filestore"/* -maxdepth 0 -type d -print | wc -l)
	i=1
	while (( $i <= $indexmax )) 
	do
		echo "$i:" >> "$newindexfile"
		(( i+=1 ))
	done
	for i in $filestore/*
	do
		name=${i##*/}
		controlfilename=$(grep ^name= "$i/.control" 2>/dev/null | cut -d= -f2)
		controlfileindex=$(grep ^index= "$i/.control" 2>/dev/null | cut -d= -f2)
		sed -i "s/^$controlfileindex:.*/$controlfileindex:$name/" "$newindexfile"
	done
	mv "$newindexfile" "$indexfile"
	logevent "'$FUNCNAME $@': success: new index file rebuilt from $filestore"
}


############################
# helper functions
############################


checkforlock ()
{
	# check for project lock
	# $1 = index of project
	# return 0 if no lock, 1 if lock exists
	projectindex=$1
	projectname=$(getprojectname $projectindex)
	projectdir=$filestore/$projectname
	lockfile=$projectdir/.lock
	if [ -e "$lockfile" ]
	then
		return 1
	else
		return 0
	fi
}


timestamp ()
{
	# no args, return current timestamp string
	# 'YYYY-MM-DD HH:MM:SS SECONDS-SINCE-1970'
	date '+%F %T %s'
}


logevent ()
{
	# $@: one arg (multi word) the log message
	# logs event to global logfile
	echo "[$(timestamp)] $scriptname $@" >> $logfile
}


convertseconds ()
{
# take seconds as $1, return formatted time as hour:minute
  ((h=${1}/3600))
  ((m=(${1}%3600)/60))
  ((s=${1}%60))
  printf "%01d:%02d\n" $h $m
}


getindex ()
{
	# get the index from the project name
	# $@ project name
	# returns index number
	# exit 1 if no such index
	projectname=$@
	indexfile=$filestore/.index
	index=$(grep "$projectname$" "$indexfile" | cut -d: -f1)
	if [[ -z $index ]]
	then
		exit 1
	else
		echo "$index"
	fi
}


putvalue ()
{
	# change (or add) value to controlfile
	# $1 index of project
	# $2 key
	# $3 value (allow multi word value)
	projectindex=$1
	key=$2
	value=${@:3}
	project=$(getprojectname $projectindex)
	if [ $? = 1 ]
	then
		echo "ERROR: $projectindex does not exist"
		exit 1
	fi
	projectdir=$filestore/$project
	controlfile=$projectdir/.control
	if grep -q "^$key=" "$controlfile"
	then
		sed -i "s/^$key=.*/$key=$value/" "$controlfile"
	else
		printf "$key=$value\n" >> "$controlfile"
	fi
}


getvalue ()
{
	# get value in controlfile
	# $1 index of project
	# $2 key
	# echo key value if found (exit 0)
	# echo 0 if not found
	# LIMITATION HERE: no key translates to keyvalue=0 (and vice versa)
	projectindex=$1
	key=$2
	project=$(getprojectname $projectindex)
	if [ $? = 1 ]
	then
		echo "ERROR: $projectindex does not exist"
		exit 1
	fi
	projectdir=$filestore/$project
	controlfile=$projectdir/.control
	value=$(grep ^$key= "$controlfile" | cut -d= -f2)
	if [[ -z $value ]]
	then
		echo 0
	else
		echo $value
	fi
}
	

getprojectname ()
{
	# get the project name from index
	# $1 index
	# return string project
	# exit 1 for no such index
	index=$1
	indexfile=$filestore/.index
	# check index consistency
	#check=$(checkindex)
	#if [[ $? != 0 ]]
	#then
	#	echo "ERROR: indexfile is corrupt, run '$scriptname fixindex' to repair"
	#	exit 1
	#fi
	projectname=$(grep "^$index:" "$indexfile" | cut -d: -f2)
	if [[ -z $projectname ]]
	then
		return 1	
	else
		echo "$projectname"
	fi
}


validatename ()
{
	# test for legal project name to maintain project naming convention 
	# allow a-z 0-9 ' '
	# $@ = project name
	# return 0 is legal, 1 if illegal
	if [[ "$@" =~ ^[a-z0-9' ']+$ ]]
	then
		return 0
	else
		return 1 
	fi
}

checkforindex ()
{
	# check whether project index exists
	# $1 = index number to check
	# return 0 if project index exists, 1 if not
	indexfile=$filestore/.index
	if grep -q ^$1: $indexfile
	then
		return 0
	else
		return 1
	fi
}


projectexists ()
{
	# check whether project exists
	# $@ project name
	# test if project exists
	# return 0 if true
	# return 1 if false (no project of that name exists)
	testproject=$@
	testprojectdir=$filestore/$testproject
	if [ -e "$testprojectdir" ]
	then
		return 0
	else
		return 1
	fi
}


backup ()
{
	# backup specified project (before all edits)
	# $@ project name
	# returns current version
	project=$@
	projectdir=$filestore/$project
	backupdir=$projectdir/.backups
	controlfile=$projectdir/.control
	if [ -d "$backupdir" ]
	then
		if [ -d "$backupdir"/1 ]
		then
			lastbackup=$(ls "$backupdir" | sort -g | tail -1)
			lastversion=$(($lastbackup+1))
			newversion=$(($lastversion+1))
		else
			lastversion=1
			newversion=2
		fi
		backupdest="$backupdir"/$lastversion
		mkdir "$backupdest"
		for i in $(ls "$projectdir")
		do
			cp "$projectdir/$i" "$backupdest" 
		done
	else
		newversion=1
		mkdir "$backupdir"
	fi
	logevent "'$FUNCNAME $@': success: backed up '$@' version $lastversion"
	echo $newversion
}


termsize ()
{
	# check termsize
	# no args
	# if term is smaller than 200x40, return 1
	# if term is at least 200x40, return 0
  width=$(tput cols)
	height=$(tput lines)
	if [ $width -lt 200 ] || [ $height -lt 40 ]
	then
		echo "TERMSIZE $width x $height (wxh) is too small for multi-window screen"
		return 1
	else
		return 0
	fi
}


##############################
# git build commands
##############################


gitpull ()
{
	# run git to pull latest down
	# for a production environment only
	if [ -e .dev ]
	then
		echo "ERROR: this is the dev environment, don't pull here"
		exit 1
	fi
	echo "$scriptname: fetching latest code from remote repository..."
	git fetch orgin master
	echo "$scriptname: updating local staging with the latest version"
	git reset --hard orgin/master
	echo "$scripname is up to date"
	logevent "'$FUNCNAME': success: latest version of $scriptname installed"
}


gitcommit ()
{
	# commit changes to repo
	git commit $scriptname
}


gitpush ()
{
	# push latest changes to remote repository
	git push -u orgin master
}


##################################
# main: read the command options
##################################

if [ $# -eq 0 ];
then
	usage
else
	while [ $# -gt 0 ]
	do
		case "$1" in
			create)
				if [ -z $2 ]
				then
					echo "ERROR: specify the project name"
					usage
				else
					name=${@:2}
					validatename $name
					if [[ $? -eq 0 ]]
					then
						projectexists $name
						if [[ $? -eq 1 ]]
						then
							create $name
							break
						else
							echo "ERROR: '$name' already exists"
							exit 1
						fi
					else
						echo "ERROR: '$name' is illegal; allowed characters are a-z and 0-9"
						exit 1
					fi
				fi
				;;
			editoutline|eo)
				# check for arguments
				if [[ $# -lt 2 ]]
				then
					echo "ERROR: '$scriptname editoutline' requires arguments"
					usage
				fi
				# check for project
				if [[ $2 =~ ^[1-9][0-9]*$ ]]
				then
					if [[ $2 -le $MAXPROJECTS ]]
					then
						if checkforindex $2
						then
							inputindex=$2
						else
							echo "ERROR: index $2 does not exist" ; exit 1
						fi
					else
						echo "ERROR: $2 is not a legal index number"
					fi
				else
					if validatename ${@:2}
					then
						if projectexists ${@:2}
						then
							inputindex=$(getindex ${@:2})
							if [[ -z $inputindex ]]
							then
								echo "ERROR: cannot get index for $inputname; index may be corrupt"
								exit 1
							fi
						else
							echo "ERROR: no project by that name"
							exit 1
						fi
					else
						echo "ERROR: invalid project name"
						exit 1
					fi
				fi
				editsingle $inputindex outline
				;;
			edit)
				if [ -z $2 ]
				then
					echo "ERROR: specify the project index or project name to edit"
					exit 1
				fi
				if [[ "$#" -eq 2 ]] && [[ "$2" =~ ^[0-9]*$ ]]
				then
					# edit by index number, check for valid index number
					if [[ $2 =~ ^[1-9][0-9]*$ ]] && [[ $2 -le $MAXPROJECTS ]]
					then
						inputindex=$2
					else
						echo "ERROR: $2 not legal index number (1-100)"
						exit 1
					fi
				else
					# edit by project name
					inputname=${@:2}
					# check if name is legal
					validatename $inputname
					if [[ $? -eq 0 ]]
					then
						# check if project already exists
						projectexists $inputname
						if [[ $? -eq 0 ]]
						then
							# get the project index number
							inputindex=$(getindex $inputname)
							if [[ -z $inputindex ]]
							then
								echo "ERROR: cannot get index for $inputname; index may be corrupt"
								exit 1
							fi
						else
							echo "ERROR: '$inputname' does not exist"
							exit 1
						fi
					else
						echo "ERROR: '$inputname' is not legal"
						exit 1
					fi
				fi
				edit $inputindex
				break
				;;
			backup)
				if [ -z $2 ]
				then
					echo "ERROR: $scriptname backup <project>"
					usage
				else
					project=${@:2}
					echo "case project=$project"
					backup2 $project
					exit
				fi
				;;
			rename)
				if [ -z $2 ]
				then
					echo "ERROR: $scriptname rename <index> 'new name'"
					usage
				else
					old=$2
					new=${@:3}
					rename $old $new
				fi
				;;
			fixindex)
				if [ -z $2 ]
				then
					check=$(checkindex)
					if [[ $? != 0 ]]
					then
						rebuildindex
						echo "index rebuilt"
					else
						echo "index is already consistent"
					fi
				fi
				;;
			list)
				list
				;;
			gitcommit)
				gitcommit
				;;
			gitpush)
				gitpush
				;;
			gitpull)
				gitpull
				;;
			init)
				init
				;;
			help)
				usage
				;;
			*)
				usage
				;;
		esac
		shift
	done
fi

